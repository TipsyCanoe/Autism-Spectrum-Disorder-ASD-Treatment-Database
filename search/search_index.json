{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Autism Spectrum Disorder (ASD) Treatment Database","text":"<p>Welcome to the ASD Treatment Database Github! Our vision is to enhance mental health outcomes for individuals with Autism Spectrum Disorder and their families by synthesizing psychiatric treatment knowledge for healthcare professionals, patients, and families. We aim to provide a comprehensive location for users of all kinds that allows for summarization of critical information of up-to-date medical papers to streamline your needs.</p> <p> </p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This comprehensive database system provides:</p> <ul> <li>Research Synthesis: Automated extraction and analysis of ASD treatment literature from PubMed</li> <li>Treatment Database: Structured database of evidence-based interventions</li> <li>Interactive Interface: React-based web application for easy user access</li> <li>AI-Powered Analysis: MedBERT integration for advanced text processing</li> </ul> <p>Live System: Hosted by Western Washington University | Database: Neon PostgreSQL</p>"},{"location":"#quick-start-local-development","title":"Quick Start (Local Development)","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ (Download)</li> <li>Node.js 16+ (Download)</li> <li>Git (Download)</li> </ul>"},{"location":"#command-line-setup","title":"Command Line Setup","text":"<pre><code># Clone and setup\ngit clone https://github.com/TipsyCanoe/Autism-Spectrum-Disorder-ASD-Treatment-Database.git\ncd Autism-Spectrum-Disorder-ASD-Treatment-Database\n\n# Install dependencies and start\npython3 -m venv venv &amp;&amp; source venv/bin/activate\npip install -r backend/requirements.txt\ncd frontend/testing-website &amp;&amp; npm install &amp;&amp; cd ../..\n\n# Start all services\n./start_all_servers.sh\n</code></pre> <p>Open http://localhost:3000 to view the application.</p>"},{"location":"#services-started","title":"Services Started","text":"<ul> <li>Frontend: React app on port 3000</li> <li>Python API: Flask backend on port 5000</li> <li>Node.js API: Job scheduler on port 5001</li> </ul>"},{"location":"#environment-configuration","title":"Environment Configuration","text":"<p>This project supports multiple environments with automatic configuration:</p>"},{"location":"#available-environments","title":"Available Environments","text":"<ul> <li><code>local</code> (default): Development with ports 3000, 5000, 5001</li> <li><code>staging</code>: Pre-production testing environment</li> <li><code>production</code>: Live deployment environment</li> </ul>"},{"location":"#environment-commands","title":"Environment Commands","text":"<pre><code># Local development (default)\n./start_all_servers.sh\n\n# Staging environment\nENVIRONMENT=staging ./start_all_servers.sh\n\n# Load specific environment manually\nsource load-env.sh  # Loads local by default\nENVIRONMENT=production source load-env.sh\n</code></pre>"},{"location":"#configuration-files","title":"Configuration Files","text":"<ul> <li><code>config/local.env</code> - Local development settings</li> <li><code>config/staging.env</code> - Staging environment template</li> <li><code>config/production.env.template</code> - Production template (copy to <code>production.env</code>)</li> </ul> <p>\ud83d\udcda Detailed Guide: See Environment File Overview</p>"},{"location":"#production-deployment","title":"Production Deployment","text":""},{"location":"#automated-production-deployment","title":"Automated Production Deployment","text":"<pre><code># One-command production deployment\n./deploy-production.sh\n</code></pre> <p>This handles:</p> <ul> <li>Environment setup and validation</li> <li>Frontend build process</li> <li>Service restarts and health checks</li> <li>Nginx configuration reload</li> </ul> <p>For a more detailed guide, see Deployment</p>"},{"location":"#testing","title":"Testing","text":"<p>Run all tests:</p> <pre><code>./run_all_tests.sh\n</code></pre> <p>Individual test suites:</p> <pre><code># Frontend tests\ncd frontend/testing-website &amp;&amp; npm test\n\n# Backend tests  \ncd backend/tests &amp;&amp; ./run_tests.sh\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#system-components","title":"System Components","text":"<ul> <li>Frontend: React.js with Tailwind CSS</li> <li>Backend APIs:</li> <li>Flask (Python) - Main application logic</li> <li>Express (Node.js) - Job scheduling and automation</li> <li>Database: Neon PostgreSQL (cloud-hosted)</li> <li>AI/ML: MedBERT integration for text analysis</li> <li>Deployment: Nginx + Gunicorn + Systemd (production)</li> </ul>"},{"location":"#data-pipeline","title":"Data Pipeline","text":"<ol> <li>PubMed API Integration \u2192 Automated literature extraction</li> <li>MedBERT Processing \u2192 AI-powered text analysis and classification</li> <li>Database Storage \u2192 Structured treatment and outcome data</li> <li>Web Interface \u2192 Healthcare professional access and search</li> </ol>"},{"location":"#features","title":"Features","text":"<ul> <li>Advanced Search: Filter treatments by age, symptoms, medications</li> <li>Evidence Synthesis: Automated analysis of treatment effectiveness</li> <li>AI-Powered: MedBERT integration for intelligent text processing</li> <li>Responsive Design: Works on desktop, tablet, and mobile</li> <li>Auto-Updates: Scheduled PubMed data refresh</li> <li>Fast Performance: Optimized queries and caching</li> </ul>"},{"location":"#database-apis","title":"Database &amp; APIs","text":""},{"location":"#pubmed-integration","title":"PubMed Integration","text":"<ul> <li>Automated Extraction: <code>pubmed_API_data.py</code>, <code>pubmed_API_ASD_data.py</code></li> <li>Manual Updates: Run <code>API_JOB.py</code> or use web interface</li> <li>Scheduling: Configure in <code>/backend/scheduler.js</code> (cron reference)</li> </ul>"},{"location":"#database","title":"Database","text":"<ul> <li>Host: Neon PostgreSQL (cloud)</li> <li>Content: Treatment studies, outcomes, patient demographics</li> <li>Updates: Automated nightly refresh from PubMed</li> </ul>"},{"location":"#medbertllm-usage","title":"MedBERT/LLM Usage","text":"<pre><code># Activate environment\nsource venv/bin/activate\n\n# Install ML dependencies\npip install -r FineTunedLLM/requirements.txt\n\n# Run analysis scripts\npython FineTunedLLM/MedBERT.py\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Environment Setup Guide - Comprehensive environment configuration</li> <li>Production Deployment - Server deployment procedures</li> <li>Nginx Configuration - Reverse proxy and routing setup</li> <li>CI/CD Pipeline - Automated testing and deployment</li> <li>File Overview - Complete file reference</li> <li>Code Documentation - Inline comments throughout codebase</li> </ul> <p>Update documentation by navigating to <code>mydocs</code>, then typing the command <code>mkdocs gh-deploy</code>.</p>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Set up local environment (<code>./start_all_servers.sh</code>)</li> <li>Make your changes and test thoroughly</li> <li>Commit your changes (<code>git commit -m 'Add AmazingFeature'</code>)</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"#license","title":"License","text":"<p>This project is part of academic research at Western Washington University. Please contact the maintainers for usage permissions.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Western Washington University - Infrastructure and hosting support</li> <li>Neon Database - Cloud database hosting</li> <li>PubMed/NCBI - Research literature access</li> <li>Hugging Face - MedBERT model hosting</li> </ul>"},{"location":"advanced/CI_CD_PIPELINE/","title":"CI/CD Pipeline","text":"<p>This document provides an overview of the Continuous Integration and Continuous Deployment pipeline for the ASD Treatment Database.</p>"},{"location":"advanced/CI_CD_PIPELINE/#overview","title":"Overview","text":"<p>The project uses GitHub Actions to automate testing. The workflow is defined in <code>.github/workflows/ci-cd.yml</code>.</p>"},{"location":"advanced/CI_CD_PIPELINE/#workflow-triggers","title":"Workflow Triggers","text":"<ul> <li>Push to <code>main</code> branch</li> <li>Pull requests to <code>main</code> branch</li> <li>Manual workflow dispatch via GitHub Actions UI</li> </ul>"},{"location":"advanced/CI_CD_PIPELINE/#test-job","title":"Test Job","text":"<p>The automated test job performs the following:</p>"},{"location":"advanced/CI_CD_PIPELINE/#setup","title":"Setup","text":"<ul> <li>Python 3.10</li> <li>Node.js 18</li> <li>Dependency caching for faster builds</li> </ul>"},{"location":"advanced/CI_CD_PIPELINE/#testing","title":"Testing","text":"<ul> <li>Installs minimal dependencies from <code>backend/requirements-test.txt</code></li> <li>Runs backend pytest with <code>DISABLE_MODEL_LOADING=1</code> to skip heavy ML model loading</li> <li>Excludes end-to-end and performance tests for speed</li> </ul>"},{"location":"advanced/CI_CD_PIPELINE/#purpose-of-disable_model_loading","title":"Purpose of DISABLE_MODEL_LOADING","text":"<p>This environment variable prevents loading MedBERT and sentence transformer models during tests, significantly reducing: - Test execution time - Memory usage - Dependency download size</p> <p>Mock objects are used instead for testing API logic.</p>"},{"location":"advanced/CI_CD_PIPELINE/#deploy-job","title":"Deploy Job","text":"<p>Current Status: Deployment is currently disabled (<code>if: false</code>) in the workflow.</p> <p>The deployment strategy is being updated to use a non-SSH approach. Documentation will be updated once the new deployment method is implemented.</p>"},{"location":"advanced/CI_CD_PIPELINE/#manual-deployment","title":"Manual Deployment","text":"<p>To deploy manually to production:</p> <pre><code>cd /path/to/project\ngit fetch origin\ngit reset --hard origin/main\n./deploy-production.sh\n</code></pre> <p>The <code>deploy-production.sh</code> script handles: - Environment setup - Frontend build - Service restarts - Nginx reload - Health checks</p>"},{"location":"advanced/CI_CD_PIPELINE/#workflow-concurrency","title":"Workflow Concurrency","text":"<p>The workflow prevents multiple simultaneous runs:</p> <pre><code>concurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n</code></pre>"},{"location":"advanced/CI_CD_PIPELINE/#best-practices","title":"Best Practices","text":""},{"location":"advanced/CI_CD_PIPELINE/#before-merging","title":"Before Merging","text":"<ul> <li>Run tests locally: <code>./run_all_tests.sh</code></li> <li>Verify tests pass in GitHub Actions</li> <li>Get code review approval</li> </ul>"},{"location":"advanced/CI_CD_PIPELINE/#branch-protection","title":"Branch Protection","text":"<p>Configure on <code>main</code> branch: - Require pull request reviews - Require status checks to pass - Require conversation resolution</p>"},{"location":"advanced/CI_CD_PIPELINE/#version-tagging","title":"Version Tagging","text":"<p>Tag releases for tracking:</p> <pre><code>git tag -a v1.0.0 -m \"Release version 1.0.0\"\ngit push origin v1.0.0\n</code></pre>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/","title":"Environment Configuration System - File Overview","text":"<p>This document provides an overview of all files created for the environment configuration system and their purposes.</p>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#configuration-files","title":"Configuration Files","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#config-directory","title":"<code>/config/</code> Directory","text":"File Purpose Notes <code>local.env</code> Local development configuration Default ports: 3000, 5000, 5001 <code>production.env</code> Production server configuration Configured for star.cs.wwu.edu <code>staging.env</code> Staging environment configuration Alternative testing environment <code>README.md</code> Configuration documentation Usage instructions"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#utility-scripts","title":"Utility Scripts","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#environment-management","title":"Environment Management","text":"File Purpose Usage <code>load-env.sh</code> Loads environment variables <code>source load-env.sh</code> <code>setup-frontend-env.sh</code> Creates React .env file Called automatically"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#deployment-scripts","title":"Deployment Scripts","text":"File Purpose Usage <code>deploy-production.sh</code> Automated production deployment <code>./deploy-production.sh</code> <code>start_all_servers.sh</code> Environment-aware startup <code>./start_all_servers.sh</code> <code>start_all_servers.sh.backup</code> Original backup Reference only"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#documentation","title":"Documentation","text":"File Purpose Audience <code>ENVIRONMENT_GUIDE.md</code> Complete usage guide Developers <code>PRODUCTION_DEPLOYMENT.md</code> Production deployment guide DevOps/Deployment <code>ENVIRONMENT_FILES_OVERVIEW.md</code> This file Reference"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#architecture-integration","title":"Architecture Integration","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#with-systemd-services","title":"With Systemd Services","text":"<ul> <li><code>asd-backend.service</code>: Python Flask API (updated to use environment file)</li> <li><code>asd-node-backend.service</code>: Node.js API (created for production stability)</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#with-nginx","title":"With Nginx","text":"<ul> <li>Configuration automatically uses correct ports from environment</li> <li>Frontend build process integrates with environment variables</li> <li>API routing matches environment URL patterns</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#with-application-code","title":"With Application Code","text":"<ul> <li>Backend: <code>app.py</code> and <code>server.js</code> load environment variables</li> <li>Frontend: React components use <code>REACT_APP_*</code> environment variables</li> <li>Database: Connection string configurable per environment</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#best-practices-implemented","title":"Best Practices Implemented","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#security","title":"Security","text":"<ul> <li>Production secrets can be overridden via environment variables</li> <li>Debug modes disabled in production</li> <li>Database URLs configurable per environment</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#maintainability","title":"Maintainability","text":"<ul> <li>Single source of truth for configuration</li> <li>Environment-specific settings clearly separated</li> <li>Automated deployment reduces human error</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#development-experience","title":"Development Experience","text":"<ul> <li>Local development remains unchanged</li> <li>Easy switching between environments</li> <li>Clear documentation and usage guides</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#production-ready","title":"Production Ready","text":"<ul> <li>Systemd service integration</li> <li>Nginx reverse proxy compatibility</li> <li>Automated health checks and verification</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#usage-summary","title":"Usage Summary","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#local-development","title":"Local Development","text":"<pre><code># Just works as before\n./start_all_servers.sh\n</code></pre>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#production-deployment","title":"Production Deployment","text":"<pre><code># One command deployment\n./deploy-production.sh\n</code></pre>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#environment-testing","title":"Environment Testing","text":"<pre><code># Test different environments\nENVIRONMENT=staging ./start_all_servers.sh\nENVIRONMENT=production ./start_all_servers.sh\n</code></pre>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#migration-notes","title":"Migration Notes","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#what-changed","title":"What Changed","text":"<ol> <li>Added: Environment configuration system</li> <li>Updated: Application code to use environment variables</li> <li>Enhanced: Startup scripts to be environment-aware</li> <li>Fixed: JSON parsing issue (description field)</li> <li>Added: Systemd service for Node.js backend</li> </ol>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#what-stayed-the-same","title":"What Stayed the Same","text":"<ul> <li>Local development workflow (no changes needed)</li> <li>Database structure and connections</li> <li>Core application functionality</li> <li>Nginx and Gunicorn setup (just enhanced)</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#backward-compatibility","title":"Backward Compatibility","text":"<ul> <li>Original startup scripts backed up</li> <li>Local development unchanged</li> <li>Existing systemd services enhanced, not replaced</li> </ul> <p>This system provides a robust, production-ready configuration management approach while maintaining simplicity for local development.</p>"},{"location":"advanced/MONITORING_AND_LOGGING/","title":"Monitoring and Logging Guide","text":"<p>This guide explains how to observe system health, gather logs, and create actionable alerts for the ASD Treatment Database deployment.</p>"},{"location":"advanced/MONITORING_AND_LOGGING/#key-components-to-monitor","title":"Key Components to Monitor","text":"Component Location / Port Health Indicators nginx 80 / 443 Serving static assets, proxy responses &lt;200ms Python backend 127.0.0.1:5000 API uptime, response times &lt;2s, memory usage &lt;1.5GB Node job backend 127.0.0.1:5001 Job executions succeed, queue empty Neon PostgreSQL Cloud Query latency &lt;500ms, connection count &lt;20"},{"location":"advanced/MONITORING_AND_LOGGING/#log-locations","title":"Log Locations","text":"<ul> <li>nginx access/error logs: <code>/var/log/nginx/access.log</code>, <code>/var/log/nginx/error.log</code></li> <li>Python backend: <code>journalctl -u asd-backend.service</code></li> <li>Node backend: <code>journalctl -u asd-node-backend.service</code></li> <li>System messages: <code>journalctl -u nginx.service</code>, <code>/var/log/syslog</code></li> </ul>"},{"location":"advanced/MONITORING_AND_LOGGING/#tail-logs-in-real-time","title":"Tail Logs in Real Time","text":"<pre><code>sudo journalctl -u asd-backend.service -f\nsudo journalctl -u asd-node-backend.service -f\nsudo tail -f /var/log/nginx/access.log\n</code></pre>"},{"location":"advanced/MONITORING_AND_LOGGING/#routine-health-checks","title":"Routine Health Checks","text":""},{"location":"advanced/MONITORING_AND_LOGGING/#daily-or-per-deploy","title":"Daily (or per deploy)","text":"<ol> <li>Ping primary API endpoints <code>bash    curl -s https://star.cs.wwu.edu/api/filters | jq '.available_filters.medication | length'    curl -s \"https://star.cs.wwu.edu/api/search?query=autism\" | jq 'length'</code></li> <li>Verify frontend build timestamp <code>bash    stat /opt/asd-db/frontend/testing-website/build/index.html</code></li> <li>Check system resource usage <code>bash    free -h    df -h /opt    top -b -n1 | head -20</code></li> </ol>"},{"location":"advanced/MONITORING_AND_LOGGING/#weekly","title":"Weekly","text":"<ul> <li>Review <code>journalctl</code> for warnings or stack traces.</li> <li>Confirm scheduled jobs ran (if automated data updates re-enabled).</li> <li>Ensure SSL certificates (if used) have &gt;30 days validity.</li> </ul>"},{"location":"advanced/MONITORING_AND_LOGGING/#metrics-to-track","title":"Metrics to Track","text":"<ul> <li>Response latency: Add simple curl timing when debugging:   <code>bash   curl -o /dev/null -s -w 'Total: %{time_total}s\\n' https://star.cs.wwu.edu/api/initial-results</code></li> <li>Memory usage: <code>systemctl status</code> shows RSS; for detailed view use <code>ps -o pid,ppid,cmd,%mem,%cpu -p $(pgrep -f gunicorn)</code>.</li> <li>Open connections: <code>ss -tulwn | grep 5000</code></li> <li>Database performance: Use Neon dashboard query statistics; consider enabling slow query logs.</li> </ul>"},{"location":"advanced/MONITORING_AND_LOGGING/#alerting-suggestions","title":"Alerting Suggestions","text":"<p>Automation is minimal today, but you can layer simple alerts:</p> <ul> <li>Simple cron-based health check: Create a cron job that hits <code>/api/filters</code> every 10 minutes and emails on failure.</li> <li>Log-based alerts: Use <code>journalctl --since \"10 minutes ago\" | grep -i error</code> in a cronjob and notify on matches.</li> <li>Neon alerts: Configure alert thresholds for connection saturation and storage usage in the Neon console.</li> </ul>"},{"location":"advanced/MONITORING_AND_LOGGING/#log-retention-rotation","title":"Log Retention &amp; Rotation","text":"<ul> <li>Journald defaults to limited retention; enforce size limit:   <code>bash   sudo journalctl --vacuum-size=500M</code></li> <li>nginx logs rotate via <code>/etc/logrotate.d/nginx</code>; ensure rotation is active to avoid disk pressure.</li> <li>Archive important incident logs under <code>/opt/asd-db/logs/</code> with timestamped filenames.</li> </ul>"},{"location":"advanced/MONITORING_AND_LOGGING/#observability-roadmap-future-enhancements","title":"Observability Roadmap (Future Enhancements)","text":"<ol> <li>Centralized logging: Forward journald + nginx logs to a remote syslog or ELK stack.</li> <li>Metrics dashboard: Deploy Prometheus node exporter + Grafana for CPU, memory, and response time charts.</li> <li>Synthetic monitoring: Use external uptime monitor (e.g., UptimeRobot) for <code>https://star.cs.wwu.edu</code>.</li> <li>Structured application logs: Adopt JSON logging in Flask/Node for easier parsing.</li> </ol> <p>Consistent monitoring and log review ensure issues are caught early and resolved before they impact users.</p>"},{"location":"advanced/NGINX_CONFIGURATION/","title":"Nginx Configuration","text":"<p>This document explains the nginx reverse proxy configuration for the ASD Treatment Database production deployment.</p>"},{"location":"advanced/NGINX_CONFIGURATION/#overview","title":"Overview","text":"<p>Nginx serves multiple roles in the production architecture:</p> <ol> <li>Static file server for the React frontend build</li> <li>Reverse proxy for the Python Flask API</li> <li>Reverse proxy for the Node.js job scheduler API</li> <li>SSL/TLS termination (if configured)</li> </ol>"},{"location":"advanced/NGINX_CONFIGURATION/#configuration-location","title":"Configuration Location","text":"<p>The main configuration file is located at:</p> <pre><code>/etc/nginx/sites-available/asd-db.conf\n</code></pre> <p>It is symlinked to <code>/etc/nginx/sites-enabled/asd-db.conf</code> to enable the site.</p>"},{"location":"advanced/NGINX_CONFIGURATION/#current-configuration","title":"Current Configuration","text":"<pre><code>server {\n    listen 80;\n    server_name star.cs.wwu.edu;\n\n    root /opt/asd-db/frontend/testing-website/build;\n    index index.html;\n\n    # Serve React app\n    location / {\n      try_files $uri $uri/ /index.html;\n    }\n\n    # Flask API\n    location /api/ {\n      proxy_pass http://127.0.0.1:5000;\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    # Node job backend\n    location /jobs/ {\n      proxy_pass http://127.0.0.1:5001/;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n    }\n\n    # Increase timeout for long requests\n    proxy_read_timeout 90s;\n}\n</code></pre>"},{"location":"advanced/NGINX_CONFIGURATION/#url-routing-explained","title":"URL Routing Explained","text":""},{"location":"advanced/NGINX_CONFIGURATION/#frontend-react","title":"Frontend (React)","text":"<p>All requests to the root path are served from the static build directory:</p> <ul> <li><code>https://star.cs.wwu.edu/</code> \u2192 <code>/opt/asd-db/frontend/testing-website/build/index.html</code></li> <li><code>https://star.cs.wwu.edu/search</code> \u2192 <code>index.html</code> (React Router handles client-side routing)</li> </ul> <p>The <code>try_files</code> directive ensures that all routes fallback to <code>index.html</code>, allowing React Router to work properly.</p>"},{"location":"advanced/NGINX_CONFIGURATION/#python-api-flask","title":"Python API (Flask)","text":"<p>API requests starting with <code>/api/</code> are proxied to the Flask backend:</p> <ul> <li><code>https://star.cs.wwu.edu/api/filters</code> \u2192 <code>http://127.0.0.1:5000/api/filters</code></li> <li><code>https://star.cs.wwu.edu/api/search</code> \u2192 <code>http://127.0.0.1:5000/api/search</code></li> <li><code>https://star.cs.wwu.edu/api/initial-results</code> \u2192 <code>http://127.0.0.1:5000/api/initial-results</code></li> </ul> <p>Note: The <code>/api/</code> prefix is preserved and forwarded to Flask because <code>proxy_pass</code> does not have a trailing slash.</p>"},{"location":"advanced/NGINX_CONFIGURATION/#nodejs-api-job-scheduler","title":"Node.js API (Job Scheduler)","text":"<p>Job-related requests starting with <code>/jobs/</code> are proxied to the Node backend:</p> <ul> <li><code>https://star.cs.wwu.edu/jobs/api/run-job</code> \u2192 <code>http://127.0.0.1:5001/api/run-job</code></li> </ul> <p>Important: The trailing slash in <code>proxy_pass http://127.0.0.1:5001/;</code> strips the <code>/jobs/</code> prefix before forwarding to the Node server. This is critical because the Node server defines routes as <code>/api/run-job</code>, not <code>/jobs/api/run-job</code>.</p>"},{"location":"advanced/NGINX_CONFIGURATION/#trailing-slash-behavior","title":"Trailing Slash Behavior","text":"<p>The trailing slash in <code>proxy_pass</code> directives controls path rewriting:</p>"},{"location":"advanced/NGINX_CONFIGURATION/#without-trailing-slash","title":"Without Trailing Slash","text":"<pre><code>location /api/ {\n  proxy_pass http://127.0.0.1:5000;\n}\n</code></pre> <p>Behavior: Full path is preserved - Request: <code>/api/filters</code> - Forwarded to: <code>http://127.0.0.1:5000/api/filters</code></p>"},{"location":"advanced/NGINX_CONFIGURATION/#with-trailing-slash","title":"With Trailing Slash","text":"<pre><code>location /jobs/ {\n  proxy_pass http://127.0.0.1:5001/;\n}\n</code></pre> <p>Behavior: Location prefix is stripped - Request: <code>/jobs/api/run-job</code> - Forwarded to: <code>http://127.0.0.1:5001/api/run-job</code> (the <code>/jobs/</code> prefix is removed)</p>"},{"location":"advanced/NGINX_CONFIGURATION/#frontend-environment-configuration","title":"Frontend Environment Configuration","text":"<p>The React frontend is configured to use these base URLs:</p> <pre><code>REACT_APP_PYTHON_API_URL=https://star.cs.wwu.edu\nREACT_APP_NODE_API_URL=https://star.cs.wwu.edu/jobs\n</code></pre> <p>The frontend code then appends specific endpoints:</p> <p>Python API: - Appends <code>/api/filters</code> \u2192 <code>https://star.cs.wwu.edu/api/filters</code> - Appends <code>/api/search</code> \u2192 <code>https://star.cs.wwu.edu/api/search</code></p> <p>Node API: - Appends <code>/api/run-job</code> \u2192 <code>https://star.cs.wwu.edu/jobs/api/run-job</code></p>"},{"location":"advanced/NGINX_CONFIGURATION/#modifying-the-configuration","title":"Modifying the Configuration","text":"<p>If you need to change the nginx configuration:</p> <ol> <li> <p>Edit the configuration file:    <code>bash    sudo nano /etc/nginx/sites-available/asd-db.conf</code></p> </li> <li> <p>Test the configuration:    <code>bash    sudo nginx -t</code></p> </li> <li> <p>If the test passes, reload nginx:    <code>bash    sudo systemctl reload nginx</code></p> </li> <li> <p>If the test fails, review error messages and fix syntax issues before reloading.</p> </li> </ol>"},{"location":"advanced/NGINX_CONFIGURATION/#testing-endpoints","title":"Testing Endpoints","text":"<p>Verify that all proxies are working correctly:</p> <pre><code># Test Python API\ncurl https://star.cs.wwu.edu/api/filters\n\n# Test Node API\ncurl -X POST https://star.cs.wwu.edu/jobs/api/run-job\n\n# Test frontend\ncurl https://star.cs.wwu.edu\n</code></pre> <p>All should return HTTP 200 status codes with appropriate content.</p>"},{"location":"advanced/NGINX_CONFIGURATION/#common-issues","title":"Common Issues","text":""},{"location":"advanced/NGINX_CONFIGURATION/#502-bad-gateway","title":"502 Bad Gateway","text":"<p>Symptoms: Nginx returns a 502 error when accessing API endpoints.</p> <p>Causes: - Backend service is not running - Backend service is listening on the wrong port - Firewall blocking localhost connections</p> <p>Solutions:</p> <pre><code># Check if services are running\nsudo systemctl status asd-backend.service\nsudo systemctl status asd-node-backend.service\n\n# Check if services are listening on correct ports\nsudo netstat -tlnp | grep -E '5000|5001'\n\n# Restart services\nsudo systemctl restart asd-backend.service asd-node-backend.service\n</code></pre>"},{"location":"advanced/NGINX_CONFIGURATION/#404-not-found-on-api-routes","title":"404 Not Found on API Routes","text":"<p>Symptoms: API requests return 404, but direct service access works.</p> <p>Causes: - Incorrect <code>proxy_pass</code> configuration - Missing or incorrect trailing slash - Route not defined in backend application</p> <p>Solutions: 1. Verify the backend route exists:    ```bash    # For Python API    grep -r \"route.*filters\" /opt/asd-db/backend/app.py</p> <p># For Node API    grep -r \"post.*run-job\" /opt/asd-db/backend/server.js    ```</p> <ol> <li> <p>Test backend directly:    <code>bash    curl http://localhost:5000/api/filters    curl -X POST http://localhost:5001/api/run-job</code></p> </li> <li> <p>If direct access works but proxied access fails, check the <code>proxy_pass</code> trailing slash.</p> </li> </ol>"},{"location":"advanced/NGINX_CONFIGURATION/#react-router-not-working","title":"React Router Not Working","text":"<p>Symptoms: Direct navigation to <code>/search</code> returns 404.</p> <p>Cause: Missing <code>try_files</code> directive or incorrect configuration.</p> <p>Solution: Ensure the location block has:</p> <pre><code>location / {\n  try_files $uri $uri/ /index.html;\n}\n</code></pre> <p>This ensures all unmatched routes fallback to <code>index.html</code>, allowing React Router to handle routing.</p>"},{"location":"advanced/NGINX_CONFIGURATION/#performance-tuning","title":"Performance Tuning","text":""},{"location":"advanced/NGINX_CONFIGURATION/#increase-timeout-for-long-requests","title":"Increase Timeout for Long Requests","text":"<p>If API requests take longer than the default timeout:</p> <pre><code>proxy_read_timeout 120s;\nproxy_connect_timeout 120s;\nproxy_send_timeout 120s;\n</code></pre>"},{"location":"advanced/NGINX_CONFIGURATION/#enable-gzip-compression","title":"Enable Gzip Compression","text":"<p>To reduce bandwidth usage:</p> <pre><code>gzip on;\ngzip_vary on;\ngzip_min_length 1000;\ngzip_types text/plain text/css application/json application/javascript text/xml application/xml;\n</code></pre>"},{"location":"advanced/NGINX_CONFIGURATION/#static-asset-caching","title":"Static Asset Caching","text":"<p>To improve frontend performance:</p> <pre><code>location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n}\n</code></pre>"},{"location":"advanced/NGINX_CONFIGURATION/#security-considerations","title":"Security Considerations","text":""},{"location":"advanced/NGINX_CONFIGURATION/#rate-limiting","title":"Rate Limiting","text":"<p>Protect against abuse by limiting request rates:</p> <pre><code>limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;\n\nlocation /api/ {\n    limit_req zone=api_limit burst=20 nodelay;\n    proxy_pass http://127.0.0.1:5000;\n}\n</code></pre>"},{"location":"advanced/NGINX_CONFIGURATION/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<p>For production deployments, configure SSL:</p> <pre><code>server {\n    listen 443 ssl http2;\n    server_name star.cs.wwu.edu;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    # Strong SSL settings\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n\n    # ... rest of configuration\n}\n\n# Redirect HTTP to HTTPS\nserver {\n    listen 80;\n    server_name star.cs.wwu.edu;\n    return 301 https://$server_name$request_uri;\n}\n</code></pre>"},{"location":"advanced/NGINX_CONFIGURATION/#backup-configuration","title":"Backup Configuration","text":"<p>Before making changes, always backup the current configuration:</p> <pre><code>sudo cp /etc/nginx/sites-available/asd-db.conf /etc/nginx/sites-available/asd-db.conf.backup\n</code></pre> <p>To restore from backup:</p> <pre><code>sudo cp /etc/nginx/sites-available/asd-db.conf.backup /etc/nginx/sites-available/asd-db.conf\nsudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/","title":"Security and Permissions Guide","text":"<p>This document outlines the security posture for the ASD Treatment Database deployment and the operational practices required to protect sensitive data and infrastructure.</p>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#access-control-overview","title":"Access Control Overview","text":"Layer Responsible Team Notes GitHub Repository Development team Protected <code>main</code> branch, reviews required Server (star.cs) WWU CS Support SSH access limited to project maintainers Database (Neon) Project maintainers Role-based access via Neon console"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#server-accounts-and-file-permissions","title":"Server Accounts and File Permissions","text":"<ul> <li>Deployment directory: <code>/opt/asd-db</code></li> <li>Owned by application service account (e.g., <code>maint:maint</code>).</li> <li>Only deploy user and root should have write access.</li> <li>Use <code>chmod 750</code> on directories that should not be world-readable.</li> <li>Systemd service files: <code>/etc/systemd/system/asd-backend.service</code> and <code>/etc/systemd/system/asd-node-backend.service</code></li> <li>Owned by <code>root:root</code>, permissions <code>644</code>.</li> <li>Edit via <code>sudo</code> only; reload daemon after changes (<code>sudo systemctl daemon-reload</code>).</li> </ul>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#environment-secrets","title":"Environment Secrets","text":"<ul> <li>Secrets are stored in <code>config/production.env</code> (not committed to Git).</li> <li>Ensure file permissions are restricted:   <code>bash   sudo chmod 600 /opt/asd-db/config/production.env   sudo chown maint:maint /opt/asd-db/config/production.env</code></li> <li>Never echo secrets into shell history. Use <code>nano</code> or <code>vi</code> from secure shell session.</li> <li>Rotate database credentials quarterly or when staff changes occur.</li> </ul>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#database-roles","title":"Database Roles","text":"<ul> <li><code>neondb_owner</code> (provided by Neon): full privileges, used by backend.</li> <li>Create read-only roles for analytics if needed.</li> <li>Avoid sharing owner credentials with non-production systems.</li> <li>Enable SSL (<code>sslmode=require</code> included in connection string).</li> </ul>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#network-security","title":"Network Security","text":"<ul> <li>nginx listens on ports 80/443; backends bound to localhost (127.0.0.1) only.</li> <li>Confirm firewall rules block external access to ports 5000/5001.</li> <li>Use HTTPS termination at nginx; obtain certificates via Let's Encrypt (future enhancement).</li> </ul>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#logging-pii-considerations","title":"Logging &amp; PII Considerations","text":"<ul> <li>Logs should not include user-provided email addresses or message content from Contact form.</li> <li>If sensitive data is logged accidentally, sanitize logs and rotate.</li> <li>Rotate journal logs periodically (<code>sudo journalctl --vacuum-time=30d</code>).</li> </ul>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#credential-rotation-checklist","title":"Credential Rotation Checklist","text":"<ol> <li>Update credential in Neon dashboard.</li> <li>Edit server environment file (<code>config/production.env</code>).</li> <li>Restart backend service:    <code>bash    sudo systemctl restart asd-backend.service</code></li> <li>Verify connectivity: <code>curl -s https://star.cs.wwu.edu/api/initial-results</code>.</li> <li>Update secret storage (GitHub Actions / future GitLab runner).</li> </ol>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#incident-response","title":"Incident Response","text":"<ul> <li>If a secret leaks:</li> <li>Immediately rotate the credential.</li> <li>Invalidate sessions / tokens if applicable.</li> <li>Audit access logs (<code>journalctl</code>, Neon query history).</li> <li>Document incident and mitigation steps in project log.</li> <li>Coordinate with WWU CS Support for server-level breaches.</li> </ul>"},{"location":"advanced/SECURITY_AND_PERMISSIONS/#github-security-settings","title":"GitHub Security Settings","text":"<ul> <li>Enable 2FA for all collaborators.</li> <li>Protect <code>main</code> branch with required reviews and status checks.</li> <li>Use deploy keys / GitHub Apps instead of personal tokens for automation.</li> <li>Keep GitHub Secrets restricted to necessary workflows.</li> </ul> <p>Adhering to these practices keeps both patient-related research data and infrastructure secure.</p>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/","title":"Troubleshooting Guide","text":"<p>This guide highlights common production issues for the ASD Treatment Database and the steps to resolve them quickly. Follow the quick checklist first, then dive into the specific scenario that matches the symptoms you are seeing.</p>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#quick-checklist","title":"Quick Checklist","text":"<ol> <li>Confirm services are running <code>bash    sudo systemctl status asd-backend.service    sudo systemctl status asd-node-backend.service    sudo systemctl status nginx.service</code></li> <li>Inspect recent logs <code>bash    sudo journalctl -u asd-backend.service --since \"15 minutes ago\"    sudo journalctl -u asd-node-backend.service --since \"15 minutes ago\"    sudo journalctl -u nginx.service --since \"15 minutes ago\"</code></li> <li>Verify database connectivity <code>bash    cd /opt/asd-db/backend    source ../venv/bin/activate    python3 -c \"import psycopg2; psycopg2.connect('postgresql://...'); print('DB OK')\"</code></li> <li>Check disk space and CPU <code>bash    df -h    top -c</code></li> </ol>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#common-issues-and-resolutions","title":"Common Issues and Resolutions","text":""},{"location":"advanced/TROUBLESHOOTING_GUIDE/#services-will-not-start","title":"Services will not start","text":"<ul> <li>Symptom: <code>systemctl status</code> shows <code>failed</code> or crash loop.</li> <li>Cause: Deploy script interrupted, missing dependencies, or syntax errors.</li> <li>Fix:</li> <li>Run <code>sudo journalctl -xe -u asd-backend.service</code> to find the stack trace.</li> <li>If dependency missing, rerun <code>pip install -r backend/requirements.txt</code> inside the virtualenv.</li> <li>Rebuild frontend if the Node service fails due to missing build: <code>npm install &amp;&amp; npm run build</code> in <code>frontend/testing-website</code>.</li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#api-returns-empty-results","title":"API returns empty results","text":"<ul> <li>Symptom: <code>/api/search</code> or <code>/api/initial-results</code> returns only a few studies.</li> <li>Cause: The in-memory cache stored a small dataset during testing (for example when using <code>?limit=2</code>).</li> <li>Fix: Restart the backend to clear cache:   <code>bash   sudo systemctl restart asd-backend.service</code></li> <li>Prevention: Avoid hitting the API with extremely small limits in production, or extend cache logic to key by limit.</li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#database-connection-errors","title":"Database connection errors","text":"<ul> <li>Symptom: Logs contain <code>psycopg2.OperationalError</code> or timeout messages.</li> <li>Cause: Incorrect credentials, rotated password, Neon outage, or firewall.</li> <li>Fix:</li> <li>Confirm <code>DATABASE_URL</code> in <code>config/production.env</code> matches Neon dashboard.</li> <li>Test connectivity from server:      <code>bash      psql \"$DATABASE_URL\" -c \"SELECT 1;\"</code></li> <li>If using new schema, ensure migrations ran and permissions set.</li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#frontend-still-shows-old-build","title":"Frontend still shows old build","text":"<ul> <li>Symptom: Website missing latest UI changes.</li> <li>Cause: Browser cache or frontend build not refreshed.</li> <li>Fix:</li> <li>Force rebuild: <code>./deploy-production.sh</code>.</li> <li>Hard-refresh browser: <code>Ctrl+Shift+R</code> (or <code>Cmd+Shift+R</code> on macOS).</li> <li>Confirm <code>/opt/asd-db/frontend/testing-website/build</code> timestamps update.</li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#nginx-404-or-double-apiapi","title":"nginx 404 or double <code>/api/api</code>","text":"<ul> <li>Symptom: Browser console shows 404 with duplicated path segments.</li> <li>Cause: Missing trailing slash on <code>/jobs/</code> proxy in nginx config.</li> <li>Fix:</li> <li>Ensure <code>/etc/nginx/sites-available/asd-db.conf</code> has <code>proxy_pass http://127.0.0.1:5001/;</code></li> <li>Test config: <code>sudo nginx -t</code></li> <li>Reload: <code>sudo systemctl reload nginx</code></li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#deploy-script-fails-mid-run","title":"Deploy script fails mid-run","text":"<ul> <li>Symptom: <code>./deploy-production.sh</code> stops with error, services partially restarted.</li> <li>Cause: Outdated dependencies, missing environment variables, build failure.</li> <li>Fix:</li> <li>Restart deploy script after addressing error.</li> <li>If repeated Node install failures occur, remove <code>frontend/testing-website/node_modules</code> and rerun <code>npm install</code>.</li> <li>Verify environment by sourcing <code>config/production.env</code> and rerunning step manually.</li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#long-startup-times-timeouts","title":"Long startup times / timeouts","text":"<ul> <li>Symptom: Health checks fail because API takes &gt;60s to respond after restart.</li> <li>Cause: MedBERT model loads at startup; first request blocked until ready.</li> <li>Fix:</li> <li>Wait 60\u201390 seconds after restart before testing.</li> <li>For CI/testing, set <code>DISABLE_MODEL_LOADING=1</code>.</li> <li>Consider warming cache after deployment (run <code>/api/filters</code>).</li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#permission-denied-writing-logs-or-builds","title":"Permission denied writing logs or builds","text":"<ul> <li>Symptom: Deploy script cannot overwrite files.</li> <li>Cause: File ownership changed or script run as wrong user.</li> <li>Fix:</li> <li>Ensure deployment commands run as system user with access to <code>/opt/asd-db</code>.</li> <li>Restore ownership if needed: <code>sudo chown -R maint:maint /opt/asd-db</code> (replace with correct user).</li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#stuck-git-worktree","title":"Stuck Git worktree","text":"<ul> <li>Symptom: <code>git pull</code> fails due to local changes.</li> <li>Fix:</li> <li>Stash or commit local changes.</li> <li><code>git pull --rebase origin main</code></li> <li>Reapply changes from stash: <code>git stash pop</code></li> </ul>"},{"location":"advanced/TROUBLESHOOTING_GUIDE/#when-to-escalate","title":"When to Escalate","text":"<ul> <li>Neon database experiencing outages \u2192 Contact Neon support / check status page.</li> <li>Server resource exhaustion (RAM &lt;100MB free) \u2192 Notify infrastructure admins.</li> <li>Security incident or credential exposure \u2192 Rotate secrets immediately and notify supervisors.</li> </ul> <p>Document every outage in the project log (see <code>logs/</code> directory) for future improvements.</p>"},{"location":"getting_started/ENVIRONMENT_GUIDE/","title":"Environment Configuration Usage Guide","text":"<p>This project now supports multiple environments (local, staging, production) with automatic configuration management.</p>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#quick-start","title":"Quick Start","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#local-development-default","title":"Local Development (Default)","text":"<pre><code># Start with local configuration (default)\n./start_all_servers.sh\n\n# Or explicitly set local environment\nENVIRONMENT=local ./start_all_servers.sh\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#production-deployment-recommended","title":"Production Deployment (Recommended)","text":"<pre><code># Use the dedicated production deployment script\n./deploy-production.sh\n\n# Or manually with environment\nENVIRONMENT=production ./start_all_servers.sh\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#staging-environment","title":"Staging Environment","text":"<pre><code># Set staging environment  \nENVIRONMENT=staging ./start_all_servers.sh\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#production-service-management","title":"Production Service Management","text":"<pre><code># Start/stop/restart individual services\nsudo systemctl start asd-backend.service\nsudo systemctl start asd-node-backend.service\nsudo systemctl restart nginx\n\n# Check service status\nsudo systemctl status asd-backend.service asd-node-backend.service nginx\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#environment-files","title":"Environment Files","text":"<p>Configuration files are located in <code>/config/</code>:</p> <ul> <li><code>local.env</code> - Local development (ports 3000, 5000, 5001)</li> <li><code>staging.env</code> - Staging environment (ports 3001, 6000, 6001)</li> <li><code>production.env</code> - Production environment (ports 80, 8000, 8001)</li> </ul>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#what-gets-configured","title":"What Gets Configured","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#backend-services","title":"Backend Services","text":"<ul> <li>Python Flask API: Uses <code>PYTHON_BACKEND_PORT</code> and <code>DATABASE_URL</code></li> <li>Node.js API: Uses <code>NODE_BACKEND_PORT</code></li> <li>Debug Settings: Uses <code>DEBUG</code> and <code>FLASK_DEBUG</code> flags</li> </ul>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#frontend","title":"Frontend","text":"<ul> <li>React Development Server: Uses <code>FRONTEND_PORT</code></li> <li>API Endpoints: Uses <code>REACT_APP_PYTHON_API_URL</code> and <code>REACT_APP_NODE_API_URL</code></li> </ul>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#manual-environment-loading","title":"Manual Environment Loading","text":"<p>You can also load environments manually:</p> <pre><code># Load environment variables\nsource load-env.sh\n\n# Check loaded configuration\necho \"Python Backend: $PYTHON_BACKEND_PORT\"\necho \"Node Backend: $NODE_BACKEND_PORT\"  \necho \"Frontend: $FRONTEND_PORT\"\necho \"Environment: $ENVIRONMENT\"\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#production-deployment-workflow","title":"Production Deployment Workflow","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#automated-deployment","title":"Automated Deployment","text":"<p>Use the dedicated production deployment script for safe, automated deployments:</p> <pre><code>./deploy-production.sh\n</code></pre> <p>This script automatically:</p> <ol> <li>Sets up production environment variables</li> <li>Builds the React frontend</li> <li>Restarts systemd services (Python + Node backends)</li> <li>Reloads nginx to serve new build</li> <li>Verifies all services are running</li> <li>Tests API endpoints</li> </ol>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#manual-production-configuration","title":"Manual Production Configuration","text":"<p>For production deployment, the <code>/config/production.env</code> is already configured for your WWU server:</p> <pre><code># Already configured for star.cs.wwu.edu\nREACT_APP_PYTHON_API_URL=https://star.cs.wwu.edu/api\nREACT_APP_NODE_API_URL=https://star.cs.wwu.edu/jobs\nPYTHON_BACKEND_PORT=5000  # Matches nginx proxy\nNODE_BACKEND_PORT=5001    # Matches nginx proxy\nDEBUG=false               # Production-ready\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#security-notes","title":"Security Notes","text":"<ul> <li>Never commit production secrets to git</li> <li>Use environment variables or CI/CD secrets for sensitive data</li> <li>The DATABASE_URL and other secrets should be overridden in production</li> <li>Consider using GitHub Secrets for automated deployments</li> </ul>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#testing-configuration","title":"Testing Configuration","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#local-development-testing","title":"Local Development Testing:","text":"<pre><code># Test local environment\nENVIRONMENT=local ./start_all_servers.sh\n\n# In another terminal, check if services are running\ncurl http://localhost:5000/api/filters  # Python backend\ncurl http://localhost:5001/api         # Node backend\ncurl http://localhost:3000             # Frontend\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#production-testing","title":"Production Testing:","text":"<pre><code># Test production services\ncurl http://localhost:5000/api/filters  # Python backend (via systemd)\ncurl http://localhost:5001/api         # Node backend (via systemd)\ncurl https://star.cs.wwu.edu           # Frontend (via nginx)\n\n# Check systemd service status\nsudo systemctl status asd-backend.service asd-node-backend.service\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#port-conflicts","title":"Port Conflicts","text":"<p>If you get port conflicts, update the port numbers in the appropriate config file.</p>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#environment-not-loading","title":"Environment Not Loading","text":"<p>Make sure to source the environment:</p> <pre><code>source load-env.sh\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#frontend-api-calls-failing","title":"Frontend API Calls Failing","text":"<p>Check that <code>REACT_APP_PYTHON_API_URL</code> and <code>REACT_APP_NODE_API_URL</code> are correctly set in your environment config file.</p>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/","title":"Production Deployment Guide","text":"<p>This guide covers deploying the ASD Treatment Database to the production server at Western Washington University.</p>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#architecture-overview","title":"Architecture Overview","text":"<p>The production system uses:</p> <ul> <li>Nginx: Reverse proxy + static file server (port 80/443)</li> <li>Gunicorn: WSGI server for Python Flask API (port 5000)</li> <li>Node.js: Express server for job scheduling (port 5001)</li> <li>Systemd: Service management for both backends</li> <li>Neon Database: Cloud-hosted PostgreSQL database</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#deployment-methods","title":"Deployment Methods","text":""},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#automated-deployment-recommended","title":"Automated Deployment (Recommended)","text":"<pre><code>./deploy-production.sh\n</code></pre> <p>This single command handles everything safely:</p> <ol> <li>Sets production environment</li> <li>Builds React frontend</li> <li>Restarts backend services</li> <li>Reloads nginx</li> <li>Verifies deployment</li> </ol>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#manual-deployment","title":"Manual Deployment","text":"<p>If you need more control:</p> <pre><code># 1. Set environment and build frontend\nENVIRONMENT=production ./setup-frontend-env.sh\ncd frontend/testing-website &amp;&amp; npm run build &amp;&amp; cd ../..\n\n# 2. Restart services\nsudo systemctl restart asd-backend.service\nsudo systemctl restart asd-node-backend.service\n\n# 3. Reload nginx\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#service-management","title":"Service Management","text":""},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#check-service-status","title":"Check Service Status","text":"<pre><code>sudo systemctl status asd-backend.service      # Python Flask API\nsudo systemctl status asd-node-backend.service # Node.js job scheduler\nsudo systemctl status nginx.service            # Web server\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#view-service-logs","title":"View Service Logs","text":"<pre><code>sudo journalctl -fu asd-backend.service      # Python backend logs\nsudo journalctl -fu asd-node-backend.service # Node backend logs\nsudo journalctl -fu nginx.service            # Nginx logs\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#startstop-services","title":"Start/Stop Services","text":"<pre><code># Stop services\nsudo systemctl stop asd-backend.service asd-node-backend.service\n\n# Start services  \nsudo systemctl start asd-backend.service asd-node-backend.service\n\n# Restart services\nsudo systemctl restart asd-backend.service asd-node-backend.service\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#configuration-files","title":"Configuration Files","text":""},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#systemd-services","title":"Systemd Services","text":"<ul> <li><code>/etc/systemd/system/asd-backend.service</code> - Python Flask service</li> <li><code>/etc/systemd/system/asd-node-backend.service</code> - Node.js service</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#nginx-configuration","title":"Nginx Configuration","text":"<ul> <li><code>/etc/nginx/sites-available/asd-db.conf</code> - Main site config</li> <li><code>/etc/nginx/sites-enabled/asd-db.conf</code> - Enabled site (symlink)</li> </ul> <p>For detailed nginx configuration documentation, see Nginx Configuration.</p>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#application-configuration","title":"Application Configuration","text":"<ul> <li><code>/opt/asd-db/config/production.env</code> - Production environment variables</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#automated-deployment-cicd","title":"Automated Deployment (CI/CD)","text":"<p>The project supports automated deployment via GitHub Actions. When enabled, pushing to the <code>main</code> branch will automatically:</p> <ol> <li>Run tests</li> <li>Deploy to production if tests pass</li> <li>Restart services and reload nginx</li> </ol> <p>For detailed CI/CD documentation, see CI/CD Pipeline.</p> <p>Note: Auto-deployment is currently disabled to isolate production during active development.</p>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#services-wont-start","title":"Services Won't Start","text":"<pre><code># Check detailed error logs\nsudo journalctl -xe -u asd-backend.service\nsudo journalctl -xe -u asd-node-backend.service\n\n# Check nginx configuration\nsudo nginx -t\n\n# Verify file permissions\nls -la /opt/asd-db/\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Test database connectivity\ncd /opt/asd-db/backend\nsource ../venv/bin/activate  \npython3 -c \"import psycopg2; print('Database connection OK')\"\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#frontend-not-loading","title":"Frontend Not Loading","text":"<pre><code># Check if build exists\nls -la /opt/asd-db/frontend/testing-website/build/\n\n# Rebuild if needed\ncd /opt/asd-db/frontend/testing-website\nnpm run build\n\n# Check nginx is serving correctly\ncurl -I https://star.cs.wwu.edu\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#health-checks","title":"Health Checks","text":"<p>Test all components:</p> <pre><code># API endpoints\ncurl -f https://star.cs.wwu.edu/api/filters   # Python API via nginx\ncurl -f https://star.cs.wwu.edu/jobs/api      # Node API via nginx\n\n# Direct backend access (internal)\ncurl -f http://localhost:5000/api/filters     # Python API direct\ncurl -f http://localhost:5001/api             # Node API direct\n\n# Frontend\ncurl -f https://star.cs.wwu.edu               # Main website\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#security-notes","title":"Security Notes","text":"<ul> <li>Services run as <code>maint</code> user (non-root)</li> <li>Database credentials stored in environment files</li> <li>Nginx handles SSL/TLS termination</li> <li>Backend services only accessible via localhost</li> <li>All external traffic goes through nginx reverse proxy</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#rollback-procedure","title":"Rollback Procedure","text":"<p>If deployment fails:</p> <pre><code># 1. Restore previous frontend build (if you have backup)\n# 2. Restart services to clear any issues\nsudo systemctl restart asd-backend.service asd-node-backend.service\n\n# 3. Check logs for issues\nsudo journalctl -xe -u asd-backend.service\n\n# 4. Reload nginx to ensure consistency\nsudo systemctl reload nginx\n</code></pre>"},{"location":"users/CONTACT_US/","title":"Contact Us","text":"<p>You can contact us by locating the following buttons under the FAQ and About tabs.</p> <p></p> A red circle around the FAQ and About tabs is shown in the top of the navigation bar. <p>After entering the page, scroll to the bottom to find a button that looks like this:</p> <p></p> A black bordered button is located at the bottom of the FAQ page named \"Contact Us\". <p>You should be greeted with a pop-up that looks like this: </p> A pop-up that contains a field for the email, name of user, and message they wish to send. <p>We'll try to respond to any questions as soon as we can!</p>"},{"location":"users/NAV_SITE/","title":"Navigating the Site","text":"<p>Upon entering the website, you should see this in front of you:</p> <p></p> The home page of the website with a navigation bar, search button, and Update Database button <p>On the top of the website, you should be able to see \"Home\", \"Search\", \"FAQ\", and \"About\". In the middle of the screen, you should be able to see the \"Search\", and \"Update Database\" button.</p> <p>The Home button takes you back to the page of the image above. Both the \"Search\" tab and \"Search\" button will take you to the Search page, where you are able to search through our database for info on various psychiatric treatments retrieved from Pubmed. The FAQ tab takes you to some commonly asked questions, and the About tab introduces our mission, who we work with, and who we are!</p> <p>At the bottom of the Home page, you can find various links to Autism Resources, which you can visit to learn more about Autism, how it affects people, and what you can do to understand it better.</p>"},{"location":"users/SEARCH_GUIDE/","title":"Search Guide","text":"<p>In this page, you will be able to learn how to search effectively in our database.</p> <p>Upon entering the Search Page, you should be greeted with this:</p> <p></p> A page containing the results of searching on the left, and filtering with detailed searching on the right in a box."},{"location":"users/SEARCH_GUIDE/#results","title":"Results","text":"<p>To the left are the studies that pertain to your search. By default, all studies are loaded. You can click on a treatment title and bring up the relevant studies. Clicking on the study will bring up a brief summary, including the primary outcome area, primary outcome measure, the treatment duration, publication date, authors, PMID in Pubmed, and the link to the study in Pubmed.</p> <p></p> A page containing the results of searching on the left, and more detailed information on a study about a certain treatment within a box."},{"location":"users/SEARCH_GUIDE/#filters","title":"Filters","text":"<p>You can also include filters for your search. We have age, symptoms and behaviors, gender, and medication type as available filters, to narrow down the result.</p> <p></p> An example of filters applied to a search. Currently, the search is filtered by male, irritability, and the medication method of accelerated theta burst stimulation."},{"location":"users/SEARCH_GUIDE/#most-recent-results","title":"Most Recent Results","text":"<p>If you feel like the studies are out-of-date, please click the Update Database button on the Home Page. This will update our database and help detect the most up-to-date papers. The process will take a couple of minutes, so we appreciate your patience.</p> <p></p> The Update Database button is highlighted on the home page with a red circle.. <p>We normally update our database once a week on Mondays, so if a paper came out after then, please feel free to update.</p>"}]}