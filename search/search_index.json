{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Autism Spectrum Disorder (ASD) Treatment Database","text":"<p>Welcome to the ASD Treatment Database Github! Our vision is to enhance mental health outcomes for individuals with Autism Spectrum Disorder and their families by synthesizing psychiatric treatment knowledge for healthcare professionals, patients, and families. We aim to provide a comprehensive location for users of all kinds that allows for summarization of critical information of up-to-date medical papers to streamline your needs.</p> <p> </p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This comprehensive database system provides:</p> <ul> <li>Research Synthesis: Automated extraction and analysis of ASD treatment literature from PubMed</li> <li>Treatment Database: Structured database of evidence-based interventions</li> <li>Interactive Interface: React-based web application for easy user access</li> <li>AI-Powered Analysis: MedBERT integration for advanced text processing</li> </ul> <p>Live System: Generously hosted by Western Washington University | Database: Neon PostgreSQL</p>"},{"location":"#quick-start-local-development","title":"Quick Start (Local Development)","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ (Download)</li> <li>Node.js 16+ (Download)</li> <li>Git (Download)</li> </ul>"},{"location":"#command-line-setup","title":"Command Line Setup","text":"<pre><code># Clone and setup\ngit clone https://github.com/TipsyCanoe/Autism-Spectrum-Disorder-ASD-Treatment-Database.git\ncd Autism-Spectrum-Disorder-ASD-Treatment-Database\n\n# Install dependencies and start\npython3 -m venv venv &amp;&amp; source venv/bin/activate\npip install -r backend/requirements.txt\ncd frontend/testing-website &amp;&amp; npm install &amp;&amp; cd ../..\n\n# Start all services\n./start_all_servers.sh\n</code></pre> <p>Open http://localhost:3000 to view the application.</p>"},{"location":"#services-started","title":"Services Started","text":"<ul> <li>Frontend: React app on port 3000</li> <li>Python API: Flask backend on port 5000</li> <li>Node.js API: Job scheduler on port 5001</li> </ul>"},{"location":"#environment-configuration","title":"\ud83d\udd27 Environment Configuration","text":"<p>This project supports multiple environments with automatic configuration:</p>"},{"location":"#available-environments","title":"Available Environments","text":"<ul> <li><code>local</code> (default): Development with ports 3000, 5000, 5001</li> <li><code>staging</code>: Pre-production testing environment</li> <li><code>production</code>: Live deployment environment</li> </ul>"},{"location":"#environment-commands","title":"Environment Commands","text":"<pre><code># Local development (default)\n./start_all_servers.sh\n\n# Staging environment\nENVIRONMENT=staging ./start_all_servers.sh\n\n# Load specific environment manually\nsource load-env.sh  # Loads local by default\nENVIRONMENT=production source load-env.sh\n</code></pre>"},{"location":"#configuration-files","title":"Configuration Files","text":"<ul> <li><code>config/local.env</code> - Local development settings</li> <li><code>config/staging.env</code> - Staging environment template</li> <li><code>config/production.env.template</code> - Production template (copy to <code>production.env</code>)</li> </ul> <p>\ud83d\udcda Detailed Guide: See ENVIRONMENT_GUIDE.md</p>"},{"location":"#production-deployment","title":"Production Deployment","text":""},{"location":"#automated-production-deployment","title":"Automated Production Deployment","text":"<pre><code># One-command production deployment\n./deploy-production.sh\n</code></pre> <p>This handles:</p> <ul> <li>Environment setup and validation</li> <li>Frontend build process</li> <li>Service restarts and health checks</li> <li>Nginx configuration reload</li> </ul> <p>For a more detailed guide, see PRODUCTION_DEPLOYMENT.md</p>"},{"location":"#testing","title":"Testing","text":"<p>Run all tests:</p> <pre><code>./run_all_tests.sh\n</code></pre> <p>Individual test suites:</p> <pre><code># Frontend tests\ncd frontend/testing-website &amp;&amp; npm test\n\n# Backend tests  \ncd backend/tests &amp;&amp; ./run_tests.sh\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#system-components","title":"System Components","text":"<ul> <li>Frontend: React.js with Tailwind CSS</li> <li>Backend APIs:</li> <li>Flask (Python) - Main application logic</li> <li>Express (Node.js) - Job scheduling and automation</li> <li>Database: Neon PostgreSQL (cloud-hosted)</li> <li>AI/ML: MedBERT integration for text analysis</li> <li>Deployment: Nginx + Gunicorn + Systemd (production)</li> </ul>"},{"location":"#data-pipeline","title":"Data Pipeline","text":"<ol> <li>PubMed API Integration \u2192 Automated literature extraction</li> <li>MedBERT Processing \u2192 AI-powered text analysis and classification</li> <li>Database Storage \u2192 Structured treatment and outcome data</li> <li>Web Interface \u2192 Healthcare professional access and search</li> </ol>"},{"location":"#features","title":"Features","text":"<ul> <li>Advanced Search: Filter treatments by age, symptoms, medications</li> <li>Evidence Synthesis: Automated analysis of treatment effectiveness</li> <li>AI-Powered: MedBERT integration for intelligent text processing</li> <li>Responsive Design: Works on desktop, tablet, and mobile</li> <li>Auto-Updates: Scheduled PubMed data refresh</li> <li>Fast Performance: Optimized queries and caching</li> </ul>"},{"location":"#database-apis","title":"Database &amp; APIs","text":""},{"location":"#pubmed-integration","title":"PubMed Integration","text":"<ul> <li>Automated Extraction: <code>pubmed_API_data.py</code>, <code>pubmed_API_ASD_data.py</code></li> <li>Manual Updates: Run <code>API_JOB.py</code> or use web interface</li> <li>Scheduling: Configure in <code>/backend/scheduler.js</code> (cron reference)</li> </ul>"},{"location":"#database","title":"Database","text":"<ul> <li>Host: Neon PostgreSQL (cloud)</li> <li>Content: Treatment studies, outcomes, patient demographics</li> <li>Updates: Automated nightly refresh from PubMed</li> </ul>"},{"location":"#medbertllm-usage","title":"MedBERT/LLM Usage","text":"<pre><code># Activate environment\nsource venv/bin/activate\n\n# Install ML dependencies\npip install -r FineTunedLLM/requirements.txt\n\n# Run analysis scripts\npython FineTunedLLM/MedBERT.py\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Environment Setup Guide - Comprehensive environment configuration</li> <li>Production Deployment - Server deployment procedures</li> <li>File Overview - Complete file reference</li> <li>Code Documentation - Inline comments throughout codebase</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Set up local environment (<code>./start_all_servers.sh</code>)</li> <li>Make your changes and test thoroughly</li> <li>Commit your changes (<code>git commit -m 'Add AmazingFeature'</code>)</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is part of academic research at Western Washington University. Please contact the maintainers for usage permissions.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Western Washington University - Infrastructure and hosting support</li> <li>Neon Database - Cloud database hosting</li> <li>PubMed/NCBI - Research literature access</li> <li>Hugging Face - MedBERT model hosting</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/","title":"Environment Configuration System - File Overview","text":"<p>This document provides an overview of all files created for the environment configuration system and their purposes.</p>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#configuration-files","title":"Configuration Files","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#config-directory","title":"<code>/config/</code> Directory","text":"File Purpose Notes <code>local.env</code> Local development configuration Default ports: 3000, 5000, 5001 <code>production.env</code> Production server configuration Configured for star.cs.wwu.edu <code>staging.env</code> Staging environment configuration Alternative testing environment <code>README.md</code> Configuration documentation Usage instructions"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#utility-scripts","title":"Utility Scripts","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#environment-management","title":"Environment Management","text":"File Purpose Usage <code>load-env.sh</code> Loads environment variables <code>source load-env.sh</code> <code>setup-frontend-env.sh</code> Creates React .env file Called automatically"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#deployment-scripts","title":"Deployment Scripts","text":"File Purpose Usage <code>deploy-production.sh</code> Automated production deployment <code>./deploy-production.sh</code> <code>start_all_servers.sh</code> Environment-aware startup <code>./start_all_servers.sh</code> <code>start_all_servers.sh.backup</code> Original backup Reference only"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#documentation","title":"\ud83d\udcda Documentation","text":"File Purpose Audience <code>ENVIRONMENT_GUIDE.md</code> Complete usage guide Developers <code>PRODUCTION_DEPLOYMENT.md</code> Production deployment guide DevOps/Deployment <code>ENVIRONMENT_FILES_OVERVIEW.md</code> This file Reference"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#architecture-integration","title":"Architecture Integration","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#with-systemd-services","title":"With Systemd Services","text":"<ul> <li><code>asd-backend.service</code>: Python Flask API (updated to use environment file)</li> <li><code>asd-node-backend.service</code>: Node.js API (created for production stability)</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#with-nginx","title":"With Nginx","text":"<ul> <li>Configuration automatically uses correct ports from environment</li> <li>Frontend build process integrates with environment variables</li> <li>API routing matches environment URL patterns</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#with-application-code","title":"With Application Code","text":"<ul> <li>Backend: <code>app.py</code> and <code>server.js</code> load environment variables</li> <li>Frontend: React components use <code>REACT_APP_*</code> environment variables</li> <li>Database: Connection string configurable per environment</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#best-practices-implemented","title":"Best Practices Implemented","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#security","title":"Security","text":"<ul> <li>Production secrets can be overridden via environment variables</li> <li>Debug modes disabled in production</li> <li>Database URLs configurable per environment</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#maintainability","title":"Maintainability","text":"<ul> <li>Single source of truth for configuration</li> <li>Environment-specific settings clearly separated</li> <li>Automated deployment reduces human error</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#development-experience","title":"Development Experience","text":"<ul> <li>Local development remains unchanged</li> <li>Easy switching between environments</li> <li>Clear documentation and usage guides</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#production-ready","title":"Production Ready","text":"<ul> <li>Systemd service integration</li> <li>Nginx reverse proxy compatibility</li> <li>Automated health checks and verification</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#usage-summary","title":"Usage Summary","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#local-development","title":"Local Development","text":"<pre><code># Just works as before\n./start_all_servers.sh\n</code></pre>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#production-deployment","title":"Production Deployment","text":"<pre><code># One command deployment\n./deploy-production.sh\n</code></pre>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#environment-testing","title":"Environment Testing","text":"<pre><code># Test different environments\nENVIRONMENT=staging ./start_all_servers.sh\nENVIRONMENT=production ./start_all_servers.sh\n</code></pre>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#migration-notes","title":"\ud83d\udd04 Migration Notes","text":""},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#what-changed","title":"What Changed","text":"<ol> <li>Added: Environment configuration system</li> <li>Updated: Application code to use environment variables</li> <li>Enhanced: Startup scripts to be environment-aware</li> <li>Fixed: JSON parsing issue (description field)</li> <li>Added: Systemd service for Node.js backend</li> </ol>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#what-stayed-the-same","title":"What Stayed the Same","text":"<ul> <li>Local development workflow (no changes needed)</li> <li>Database structure and connections</li> <li>Core application functionality</li> <li>Nginx and Gunicorn setup (just enhanced)</li> </ul>"},{"location":"advanced/ENVIRONMENT_FILES_OVERVIEW/#backward-compatibility","title":"Backward Compatibility","text":"<ul> <li>Original startup scripts backed up</li> <li>Local development unchanged</li> <li>Existing systemd services enhanced, not replaced</li> </ul> <p>This system provides a robust, production-ready configuration management approach while maintaining simplicity for local development.</p>"},{"location":"getting_started/ENVIRONMENT_GUIDE/","title":"Environment Configuration Usage Guide","text":"<p>This project now supports multiple environments (local, staging, production) with automatic configuration management.</p>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#quick-start","title":"Quick Start","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#local-development-default","title":"Local Development (Default)","text":"<pre><code># Start with local configuration (default)\n./start_all_servers.sh\n\n# Or explicitly set local environment\nENVIRONMENT=local ./start_all_servers.sh\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#production-deployment-recommended","title":"Production Deployment (Recommended)","text":"<pre><code># Use the dedicated production deployment script\n./deploy-production.sh\n\n# Or manually with environment\nENVIRONMENT=production ./start_all_servers.sh\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#staging-environment","title":"Staging Environment","text":"<pre><code># Set staging environment  \nENVIRONMENT=staging ./start_all_servers.sh\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#production-service-management","title":"Production Service Management","text":"<pre><code># Start/stop/restart individual services\nsudo systemctl start asd-backend.service\nsudo systemctl start asd-node-backend.service\nsudo systemctl restart nginx\n\n# Check service status\nsudo systemctl status asd-backend.service asd-node-backend.service nginx\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#environment-files","title":"Environment Files","text":"<p>Configuration files are located in <code>/config/</code>:</p> <ul> <li><code>local.env</code> - Local development (ports 3000, 5000, 5001)</li> <li><code>staging.env</code> - Staging environment (ports 3001, 6000, 6001)</li> <li><code>production.env</code> - Production environment (ports 80, 8000, 8001)</li> </ul>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#what-gets-configured","title":"What Gets Configured","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#backend-services","title":"Backend Services","text":"<ul> <li>Python Flask API: Uses <code>PYTHON_BACKEND_PORT</code> and <code>DATABASE_URL</code></li> <li>Node.js API: Uses <code>NODE_BACKEND_PORT</code></li> <li>Debug Settings: Uses <code>DEBUG</code> and <code>FLASK_DEBUG</code> flags</li> </ul>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#frontend","title":"Frontend","text":"<ul> <li>React Development Server: Uses <code>FRONTEND_PORT</code></li> <li>API Endpoints: Uses <code>REACT_APP_PYTHON_API_URL</code> and <code>REACT_APP_NODE_API_URL</code></li> </ul>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#manual-environment-loading","title":"Manual Environment Loading","text":"<p>You can also load environments manually:</p> <pre><code># Load environment variables\nsource load-env.sh\n\n# Check loaded configuration\necho \"Python Backend: $PYTHON_BACKEND_PORT\"\necho \"Node Backend: $NODE_BACKEND_PORT\"  \necho \"Frontend: $FRONTEND_PORT\"\necho \"Environment: $ENVIRONMENT\"\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#production-deployment-workflow","title":"Production Deployment Workflow","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#automated-deployment","title":"Automated Deployment","text":"<p>Use the dedicated production deployment script for safe, automated deployments:</p> <pre><code>./deploy-production.sh\n</code></pre> <p>This script automatically:</p> <ol> <li>Sets up production environment variables</li> <li>Builds the React frontend</li> <li>Restarts systemd services (Python + Node backends)</li> <li>Reloads nginx to serve new build</li> <li>Verifies all services are running</li> <li>Tests API endpoints</li> </ol>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#manual-production-configuration","title":"Manual Production Configuration","text":"<p>For production deployment, the <code>/config/production.env</code> is already configured for your WWU server:</p> <pre><code># Already configured for star.cs.wwu.edu\nREACT_APP_PYTHON_API_URL=https://star.cs.wwu.edu/api\nREACT_APP_NODE_API_URL=https://star.cs.wwu.edu/jobs\nPYTHON_BACKEND_PORT=5000  # Matches nginx proxy\nNODE_BACKEND_PORT=5001    # Matches nginx proxy\nDEBUG=false               # Production-ready\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#security-notes","title":"Security Notes","text":"<ul> <li>Never commit production secrets to git</li> <li>Use environment variables or CI/CD secrets for sensitive data</li> <li>The DATABASE_URL and other secrets should be overridden in production</li> <li>Consider using GitHub Secrets for automated deployments</li> </ul>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#testing-configuration","title":"Testing Configuration","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#local-development-testing","title":"Local Development Testing:","text":"<pre><code># Test local environment\nENVIRONMENT=local ./start_all_servers.sh\n\n# In another terminal, check if services are running\ncurl http://localhost:5000/api/filters  # Python backend\ncurl http://localhost:5001/api         # Node backend\ncurl http://localhost:3000             # Frontend\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#production-testing","title":"Production Testing:","text":"<pre><code># Test production services\ncurl http://localhost:5000/api/filters  # Python backend (via systemd)\ncurl http://localhost:5001/api         # Node backend (via systemd)\ncurl https://star.cs.wwu.edu           # Frontend (via nginx)\n\n# Check systemd service status\nsudo systemctl status asd-backend.service asd-node-backend.service\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting_started/ENVIRONMENT_GUIDE/#port-conflicts","title":"Port Conflicts","text":"<p>If you get port conflicts, update the port numbers in the appropriate config file.</p>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#environment-not-loading","title":"Environment Not Loading","text":"<p>Make sure to source the environment:</p> <pre><code>source load-env.sh\n</code></pre>"},{"location":"getting_started/ENVIRONMENT_GUIDE/#frontend-api-calls-failing","title":"Frontend API Calls Failing","text":"<p>Check that <code>REACT_APP_PYTHON_API_URL</code> and <code>REACT_APP_NODE_API_URL</code> are correctly set in your environment config file.</p>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/","title":"Production Deployment Guide","text":"<p>This guide covers deploying the ASD Treatment Database to the production server at Western Washington University.</p>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#architecture-overview","title":"Architecture Overview","text":"<p>The production system uses:</p> <ul> <li>Nginx: Reverse proxy + static file server (port 80/443)</li> <li>Gunicorn: WSGI server for Python Flask API (port 5000)</li> <li>Node.js: Express server for job scheduling (port 5001)</li> <li>Systemd: Service management for both backends</li> <li>Neon Database: Cloud-hosted PostgreSQL database</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#deployment-methods","title":"Deployment Methods","text":""},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#automated-deployment-recommended","title":"Automated Deployment (Recommended)","text":"<pre><code>./deploy-production.sh\n</code></pre> <p>This single command handles everything safely:</p> <ol> <li>Sets production environment</li> <li>Builds React frontend</li> <li>Restarts backend services</li> <li>Reloads nginx</li> <li>Verifies deployment</li> </ol>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#manual-deployment","title":"Manual Deployment","text":"<p>If you need more control:</p> <pre><code># 1. Set environment and build frontend\nENVIRONMENT=production ./setup-frontend-env.sh\ncd frontend/testing-website &amp;&amp; npm run build &amp;&amp; cd ../..\n\n# 2. Restart services\nsudo systemctl restart asd-backend.service\nsudo systemctl restart asd-node-backend.service\n\n# 3. Reload nginx\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#service-management","title":"Service Management","text":""},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#check-service-status","title":"Check Service Status","text":"<pre><code>sudo systemctl status asd-backend.service      # Python Flask API\nsudo systemctl status asd-node-backend.service # Node.js job scheduler\nsudo systemctl status nginx.service            # Web server\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#view-service-logs","title":"View Service Logs","text":"<pre><code>sudo journalctl -fu asd-backend.service      # Python backend logs\nsudo journalctl -fu asd-node-backend.service # Node backend logs\nsudo journalctl -fu nginx.service            # Nginx logs\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#startstop-services","title":"Start/Stop Services","text":"<pre><code># Stop services\nsudo systemctl stop asd-backend.service asd-node-backend.service\n\n# Start services  \nsudo systemctl start asd-backend.service asd-node-backend.service\n\n# Restart services\nsudo systemctl restart asd-backend.service asd-node-backend.service\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#configuration-files","title":"Configuration Files","text":""},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#systemd-services","title":"Systemd Services","text":"<ul> <li><code>/etc/systemd/system/asd-backend.service</code> - Python Flask service</li> <li><code>/etc/systemd/system/asd-node-backend.service</code> - Node.js service</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#nginx-configuration","title":"Nginx Configuration","text":"<ul> <li><code>/etc/nginx/sites-available/asd-db.conf</code> - Main site config</li> <li><code>/etc/nginx/sites-enabled/asd-db.conf</code> - Enabled site (symlink)</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#application-configuration","title":"Application Configuration","text":"<ul> <li><code>/opt/asd-db/config/production.env</code> - Production environment variables</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#services-wont-start","title":"Services Won't Start","text":"<pre><code># Check detailed error logs\nsudo journalctl -xe -u asd-backend.service\nsudo journalctl -xe -u asd-node-backend.service\n\n# Check nginx configuration\nsudo nginx -t\n\n# Verify file permissions\nls -la /opt/asd-db/\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Test database connectivity\ncd /opt/asd-db/backend\nsource ../venv/bin/activate  \npython3 -c \"import psycopg2; print('Database connection OK')\"\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#frontend-not-loading","title":"Frontend Not Loading","text":"<pre><code># Check if build exists\nls -la /opt/asd-db/frontend/testing-website/build/\n\n# Rebuild if needed\ncd /opt/asd-db/frontend/testing-website\nnpm run build\n\n# Check nginx is serving correctly\ncurl -I https://star.cs.wwu.edu\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#health-checks","title":"Health Checks","text":"<p>Test all components:</p> <pre><code># API endpoints\ncurl -f https://star.cs.wwu.edu/api/filters   # Python API via nginx\ncurl -f https://star.cs.wwu.edu/jobs/api      # Node API via nginx\n\n# Direct backend access (internal)\ncurl -f http://localhost:5000/api/filters     # Python API direct\ncurl -f http://localhost:5001/api             # Node API direct\n\n# Frontend\ncurl -f https://star.cs.wwu.edu               # Main website\n</code></pre>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#security-notes","title":"Security Notes","text":"<ul> <li>Services run as <code>maint</code> user (non-root)</li> <li>Database credentials stored in environment files</li> <li>Nginx handles SSL/TLS termination</li> <li>Backend services only accessible via localhost</li> <li>All external traffic goes through nginx reverse proxy</li> </ul>"},{"location":"getting_started/PRODUCTION_DEPLOYMENT/#rollback-procedure","title":"Rollback Procedure","text":"<p>If deployment fails:</p> <pre><code># 1. Restore previous frontend build (if you have backup)\n# 2. Restart services to clear any issues\nsudo systemctl restart asd-backend.service asd-node-backend.service\n\n# 3. Check logs for issues\nsudo journalctl -xe -u asd-backend.service\n\n# 4. Reload nginx to ensure consistency\nsudo systemctl reload nginx\n</code></pre>"}]}